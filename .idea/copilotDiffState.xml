<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/server/__tests__/routes.test.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/server/__tests__/routes.test.ts" />
              <option name="originalContent" value="import { describe, it, expect, beforeAll, afterAll, jest } from '@jest/globals';&#10;import request from 'supertest';&#10;import express from 'express';&#10;import { registerRoutes } from '../routes';&#10;import axios from 'axios';&#10;&#10;describe('SEO Analyzer API', () =&gt; {&#10;  let app: express.Express;&#10;  let server: any;&#10;&#10;  beforeAll(() =&gt; {&#10;    app = express();&#10;    app.use(express.json());&#10;    app.use(express.urlencoded({ extended: false }));&#10;    server = registerRoutes(app);&#10;  });&#10;&#10;  afterAll(() =&gt; {&#10;    server.close();&#10;  });&#10;&#10;  beforeEach(() =&gt; {&#10;    jest.restoreAllMocks();&#10;  });&#10;&#10;  describe('POST /api/analyze', () =&gt; {&#10;    it('should analyze a valid URL with complete SEO tags', async () =&gt; {&#10;      const mockHtml = `&#10;        &lt;!DOCTYPE html&gt;&#10;        &lt;html&gt;&#10;        &lt;head&gt;&#10;          &lt;title&gt;Perfect SEO Page - 50 Characters Long Title&lt;/title&gt;&#10;          &lt;meta name=&quot;description&quot; content=&quot;This is a perfect meta description that is exactly the right length for SEO optimization and provides valuable information about the page content.&quot;&gt;&#10;          &lt;meta name=&quot;robots&quot; content=&quot;index, follow&quot;&gt;&#10;          &lt;meta property=&quot;og:title&quot; content=&quot;Perfect SEO Page - Social Media&quot;&gt;&#10;          &lt;meta property=&quot;og:description&quot; content=&quot;Perfect OG description for social media sharing&quot;&gt;&#10;          &lt;meta property=&quot;og:image&quot; content=&quot;https://example.com/image.jpg&quot;&gt;&#10;          &lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&gt;&#10;          &lt;meta name=&quot;twitter:title&quot; content=&quot;Perfect SEO Page - Twitter&quot;&gt;&#10;          &lt;meta name=&quot;twitter:description&quot; content=&quot;Perfect Twitter description&quot;&gt;&#10;          &lt;meta name=&quot;twitter:image&quot; content=&quot;https://example.com/twitter-image.jpg&quot;&gt;&#10;        &lt;/head&gt;&#10;        &lt;body&gt;&#10;          &lt;h1&gt;Perfect SEO Page&lt;/h1&gt;&#10;          &lt;p&gt;This is a well-optimized page with all necessary SEO tags.&lt;/p&gt;&#10;        &lt;/body&gt;&#10;        &lt;/html&gt;&#10;      `;&#10;      jest.spyOn(axios, 'get').mockResolvedValue({ data: mockHtml });&#10;&#10;      const response = await request(app)&#10;        .post('/api/analyze')&#10;        .send({ url: 'https://example.com' })&#10;        .expect(200);&#10;&#10;      expect(response.body).toHaveProperty('url', 'https://example.com');&#10;      expect(response.body).toHaveProperty('score');&#10;      expect(response.body.score).toBeGreaterThan(90);&#10;      expect(response.body).toHaveProperty('tags');&#10;      expect(response.body).toHaveProperty('breakdown');&#10;      expect(response.body).toHaveProperty('previews');&#10;    });&#10;&#10;    it('should handle missing SEO tags and provide warnings', async () =&gt; {&#10;      const mockHtml = `&#10;        &lt;!DOCTYPE html&gt;&#10;        &lt;html&gt;&#10;        &lt;head&gt;&#10;          &lt;title&gt;Bad&lt;/title&gt;&#10;        &lt;/head&gt;&#10;        &lt;body&gt;&#10;          &lt;h1&gt;Poor SEO Page&lt;/h1&gt;&#10;        &lt;/body&gt;&#10;        &lt;/html&gt;&#10;      `;&#10;      jest.spyOn(axios, 'get').mockResolvedValue({ data: mockHtml });&#10;&#10;      const response = await request(app)&#10;        .post('/api/analyze')&#10;        .send({ url: 'https://bad-seo.com' })&#10;        .expect(200);&#10;&#10;      expect(response.body.score).toBeLessThan(50);&#10;      expect(response.body.breakdown.length).toBeGreaterThan(0);&#10;    });&#10;&#10;    it('should handle completely missing SEO tags', async () =&gt; {&#10;      const mockHtml = `&#10;        &lt;!DOCTYPE html&gt;&#10;        &lt;html&gt;&#10;        &lt;body&gt;&#10;          &lt;h1&gt;No SEO at all&lt;/h1&gt;&#10;        &lt;/body&gt;&#10;        &lt;/html&gt;&#10;      `;&#10;      jest.spyOn(axios, 'get').mockResolvedValue({ data: mockHtml });&#10;&#10;      const response = await request(app)&#10;        .post('/api/analyze')&#10;        .send({ url: 'https://no-seo.com' })&#10;        .expect(200);&#10;&#10;      expect(response.body.score).toBeLessThan(25);&#10;    });&#10;&#10;    it('should handle URLs without protocol by adding https', async () =&gt; {&#10;      const mockHtml = '&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;';&#10;      jest.spyOn(axios, 'get').mockResolvedValue({ data: mockHtml });&#10;&#10;      const response = await request(app)&#10;        .post('/api/analyze')&#10;        .send({ url: 'https://example.com' })&#10;        .expect(200);&#10;&#10;      expect(response.body.url).toBe('https://example.com');&#10;    });&#10;&#10;    it('should handle network errors gracefully', async () =&gt; {&#10;      jest.spyOn(axios, 'get').mockRejectedValue({ code: 'ENOTFOUND' });&#10;&#10;      const response = await request(app)&#10;        .post('/api/analyze')&#10;        .send({ url: 'https://unreachable.com' })&#10;        .expect(400);&#10;&#10;      expect(response.body.message).toContain('Unable to reach the specified URL');&#10;    });&#10;&#10;    it('should handle 404 errors', async () =&gt; {&#10;      jest.spyOn(axios, 'get').mockRejectedValue({ response: { status: 404 } });&#10;&#10;      const response = await request(app)&#10;        .post('/api/analyze')&#10;        .send({ url: 'https://example.com/nonexistent' })&#10;        .expect(400);&#10;&#10;      expect(response.body.message).toContain('not found (404 error)');&#10;    });&#10;&#10;    it('should handle server errors', async () =&gt; {&#10;      jest.spyOn(axios, 'get').mockRejectedValue({ response: { status: 500 } });&#10;&#10;      const response = await request(app)&#10;        .post('/api/analyze')&#10;        .send({ url: 'https://example.com' })&#10;        .expect(400);&#10;&#10;      expect(response.body.message).toContain('server returned an error');&#10;    });&#10;&#10;    it('should validate request body schema', async () =&gt; {&#10;      const response = await request(app)&#10;        .post('/api/analyze')&#10;        .send({ invalidField: 'test' })&#10;        .expect(500);&#10;&#10;      expect(response.body).toHaveProperty('message');&#10;    });&#10;  });&#10;});" />
              <option name="updatedContent" value="import { describe, it, expect, beforeAll, afterAll, jest } from '@jest/globals';&#10;import request from 'supertest';&#10;import express from 'express';&#10;import { registerRoutes } from '../routes';&#10;import axios from 'axios';&#10;&#10;describe('SEO Analyzer API', () =&gt; {&#10;  let app: express.Express;&#10;  let server: any;&#10;&#10;  beforeAll(() =&gt; {&#10;    app = express();&#10;    app.use(express.json());&#10;    app.use(express.urlencoded({ extended: false }));&#10;    server = registerRoutes(app);&#10;  });&#10;&#10;  afterAll(() =&gt; {&#10;    server.close();&#10;  });&#10;&#10;  beforeEach(() =&gt; {&#10;    jest.restoreAllMocks();&#10;  });&#10;&#10;  describe('POST /api/analyze', () =&gt; {&#10;    it('should analyze a valid URL with complete SEO tags', async () =&gt; {&#10;      const mockHtml = `&#10;        &lt;!DOCTYPE html&gt;&#10;        &lt;html&gt;&#10;        &lt;head&gt;&#10;          &lt;title&gt;Perfect SEO Page - 50 Characters Long Title&lt;/title&gt;&#10;          &lt;meta name=&quot;description&quot; content=&quot;This is a perfect meta description that is exactly the right length for SEO optimization and provides valuable information about the page content.&quot;&gt;&#10;          &lt;meta name=&quot;robots&quot; content=&quot;index, follow&quot;&gt;&#10;          &lt;meta property=&quot;og:title&quot; content=&quot;Perfect SEO Page - Social Media&quot;&gt;&#10;          &lt;meta property=&quot;og:description&quot; content=&quot;Perfect OG description for social media sharing&quot;&gt;&#10;          &lt;meta property=&quot;og:image&quot; content=&quot;https://example.com/image.jpg&quot;&gt;&#10;          &lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&gt;&#10;          &lt;meta name=&quot;twitter:title&quot; content=&quot;Perfect SEO Page - Twitter&quot;&gt;&#10;          &lt;meta name=&quot;twitter:description&quot; content=&quot;Perfect Twitter description&quot;&gt;&#10;          &lt;meta name=&quot;twitter:image&quot; content=&quot;https://example.com/twitter-image.jpg&quot;&gt;&#10;        &lt;/head&gt;&#10;        &lt;body&gt;&#10;          &lt;h1&gt;Perfect SEO Page&lt;/h1&gt;&#10;          &lt;p&gt;This is a well-optimized page with all necessary SEO tags.&lt;/p&gt;&#10;        &lt;/body&gt;&#10;        &lt;/html&gt;&#10;      `;&#10;      jest.spyOn(axios, 'get').mockResolvedValue({ data: mockHtml });&#10;&#10;      const response = await request(app)&#10;        .post('/api/analyze')&#10;        .send({ url: 'https://example.com' })&#10;        .expect(200);&#10;&#10;      expect(response.body).toHaveProperty('url', 'https://example.com');&#10;      expect(response.body).toHaveProperty('score');&#10;      expect(response.body.score).toBeGreaterThan(90);&#10;      expect(response.body).toHaveProperty('tags');&#10;      expect(response.body).toHaveProperty('breakdown');&#10;      expect(response.body).toHaveProperty('previews');&#10;    });&#10;&#10;    it('should handle missing SEO tags and provide warnings', async () =&gt; {&#10;      const mockHtml = `&#10;        &lt;!DOCTYPE html&gt;&#10;        &lt;html&gt;&#10;        &lt;head&gt;&#10;          &lt;title&gt;Bad&lt;/title&gt;&#10;        &lt;/head&gt;&#10;        &lt;body&gt;&#10;          &lt;h1&gt;Poor SEO Page&lt;/h1&gt;&#10;        &lt;/body&gt;&#10;        &lt;/html&gt;&#10;      `;&#10;      jest.spyOn(axios, 'get').mockResolvedValue({ data: mockHtml });&#10;&#10;      const response = await request(app)&#10;        .post('/api/analyze')&#10;        .send({ url: 'https://bad-seo.com' })&#10;        .expect(200);&#10;&#10;      expect(response.body.score).toBeLessThan(50);&#10;      expect(response.body.breakdown.length).toBeGreaterThan(0);&#10;    });&#10;&#10;    it('should handle completely missing SEO tags', async () =&gt; {&#10;      const mockHtml = `&#10;        &lt;!DOCTYPE html&gt;&#10;        &lt;html&gt;&#10;        &lt;body&gt;&#10;          &lt;h1&gt;No SEO at all&lt;/h1&gt;&#10;        &lt;/body&gt;&#10;        &lt;/html&gt;&#10;      `;&#10;      jest.spyOn(axios, 'get').mockResolvedValue({ data: mockHtml });&#10;&#10;      const response = await request(app)&#10;        .post('/api/analyze')&#10;        .send({ url: 'https://no-seo.com' })&#10;        .expect(200);&#10;&#10;      expect(response.body.score).toBeLessThan(25);&#10;    });&#10;&#10;    it('should handle URLs without protocol by adding https', async () =&gt; {&#10;      const mockHtml = '&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;';&#10;      jest.spyOn(axios, 'get').mockResolvedValue({ data: mockHtml });&#10;&#10;      const response = await request(app)&#10;        .post('/api/analyze')&#10;        .send({ url: 'https://example.com' })&#10;        .expect(200);&#10;&#10;      expect(response.body.url).toBe('https://example.com');&#10;    });&#10;&#10;    it('should handle network errors gracefully', async () =&gt; {&#10;      jest.spyOn(axios, 'get').mockRejectedValue({ code: 'ENOTFOUND' });&#10;&#10;      const response = await request(app)&#10;        .post('/api/analyze')&#10;        .send({ url: 'https://unreachable.com' })&#10;        .expect(400);&#10;&#10;      expect(response.body.message).toContain('Unable to reach the specified URL');&#10;    });&#10;&#10;    it('should handle 404 errors', async () =&gt; {&#10;      jest.spyOn(axios, 'get').mockRejectedValue({ response: { status: 404 } });&#10;&#10;      const response = await request(app)&#10;        .post('/api/analyze')&#10;        .send({ url: 'https://example.com/nonexistent' })&#10;        .expect(400);&#10;&#10;      expect(response.body.message).toContain('not found (404 error)');&#10;    });&#10;&#10;    it('should handle server errors', async () =&gt; {&#10;      jest.spyOn(axios, 'get').mockRejectedValue({ response: { status: 500 } });&#10;&#10;      const response = await request(app)&#10;        .post('/api/analyze')&#10;        .send({ url: 'https://example.com' })&#10;        .expect(400);&#10;&#10;      expect(response.body.message).toContain('server returned an error');&#10;    });&#10;&#10;    it('should validate request body schema', async () =&gt; {&#10;      const response = await request(app)&#10;        .post('/api/analyze')&#10;        .send({ invalidField: 'test' })&#10;        .expect(400);&#10;&#10;      expect(response.body).toHaveProperty('message');&#10;    });&#10;  });&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>